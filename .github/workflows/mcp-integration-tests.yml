name: MCP Integration Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/mcp/**'
      - 'tests/integration/mcp/**'
      - '.github/workflows/mcp-integration-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/mcp/**'
      - 'tests/integration/mcp/**'
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  POSTGRES_PASSWORD: MyPostgresPass123
  MYSQL_PASSWORD: MyMySQLPass123
  MONGODB_PASSWORD: MyMongoPass123
  REDIS_PASSWORD: MyRedisPass123

jobs:
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgresql:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: test_integration_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          MYSQL_DATABASE: test_integration_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: ${{ env.MONGODB_PASSWORD }}
          MONGO_INITDB_DATABASE: test_integration_db
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        # Note: Password will be set via command in test configuration

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client mysql-client

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov
          pip install psycopg pymongo redis motor aiosqlite mysql-connector-python pyyaml

      - name: Verify database connectivity
        run: |
          echo "Testing PostgreSQL..."
          pg_isready -h localhost -p 5432 -U postgres

          echo "Testing MySQL..."
          mysqladmin ping -h localhost -P 3306 -u root -p${{ env.MYSQL_PASSWORD }}

          echo "Testing MongoDB..."
          mongosh --host localhost --port 27017 --username admin --password ${{ env.MONGODB_PASSWORD }} --authenticationDatabase admin --eval "db.adminCommand('ping')"

          echo "Testing Redis..."
          redis-cli -h localhost -p 6379 ping

      - name: Run integration tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          MYSQL_HOST: localhost
          MYSQL_PORT: 3306
          MONGODB_HOST: localhost
          MONGODB_PORT: 27017
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          python -m pytest \
            tests/integration/mcp/ \
            -v \
            --tb=short \
            --color=yes \
            --cov=src/mcp \
            --cov-report=term-missing \
            --cov-report=html \
            --cov-report=xml \
            --junit-xml=test-results.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: integration-tests
          name: mcp-integration-coverage
          fail_ci_if_error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results.xml
            htmlcov/
            coverage.xml

      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: test-results.xml
          check_name: Integration Test Results

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}
          MINIMUM_GREEN: 85
          MINIMUM_ORANGE: 70

      - name: Check coverage threshold
        run: |
          coverage report --fail-under=85

  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: integration-tests

    services:
      postgresql:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: test_integration_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          MYSQL_DATABASE: test_integration_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: ${{ env.MONGODB_PASSWORD }}
        ports:
          - 27017:27017

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio
          pip install psycopg pymongo redis motor aiosqlite mysql-connector-python

      - name: Run performance benchmarks
        env:
          POSTGRES_HOST: localhost
          MYSQL_HOST: localhost
          MONGODB_HOST: localhost
          REDIS_HOST: localhost
        run: |
          python -m pytest \
            tests/integration/mcp/test_mcp_performance.py \
            -v \
            --tb=short \
            -s

      - name: Upload benchmark results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: benchmark-results.txt

  docker-tests:
    name: Docker Container Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install pytest pytest-asyncio pyyaml

      - name: Start Docker containers
        run: |
          cd tests/integration/mcp
          chmod +x run_tests.sh
          ./run_tests.sh --skip-docker &
          sleep 5

      - name: Run Docker integration tests
        run: |
          python -m pytest \
            tests/integration/mcp/test_docker_integration.py \
            -v \
            --tb=short

      - name: Cleanup
        if: always()
        run: |
          cd tests/integration/mcp
          chmod +x cleanup.sh
          ./cleanup.sh

  matrix-tests:
    name: Matrix Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    services:
      postgresql:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: test_integration_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov
          pip install psycopg pymongo redis motor aiosqlite mysql-connector-python

      - name: Run tests
        env:
          POSTGRES_HOST: localhost
          REDIS_HOST: localhost
        run: |
          python -m pytest \
            tests/integration/mcp/test_postgresql_integration.py \
            tests/integration/mcp/test_redis_integration.py \
            tests/integration/mcp/test_sqlite_integration.py \
            -v

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests, docker-tests, matrix-tests]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Performance Tests: ${{ needs.performance-tests.result }}"
          echo "Docker Tests: ${{ needs.docker-tests.result }}"
          echo "Matrix Tests: ${{ needs.matrix-tests.result }}"

          if [ "${{ needs.integration-tests.result }}" != "success" ] || \
             [ "${{ needs.docker-tests.result }}" != "success" ]; then
            echo "Some tests failed!"
            exit 1
          fi

          echo "All required tests passed!"
