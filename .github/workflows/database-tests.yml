name: Database Integration Tests

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
    paths:
      - 'src/**'
      - 'tests/**'
      - 'docker/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/database-tests.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'src/**'
      - 'tests/**'
      - 'docker/**'
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch:
    inputs:
      cleanup:
        description: 'Cleanup Docker resources after tests'
        required: false
        default: 'true'
        type: boolean

env:
  NODE_ENV: test
  CI: true
  DATABASE_TEST_MODE: docker

jobs:
  database-integration-tests:
    name: Database Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm list --depth=0 || true

      - name: Verify Docker installation
        run: |
          docker --version
          docker-compose --version
          docker info

      - name: Check disk space
        run: df -h

      - name: Pull Docker images
        working-directory: ./docker
        run: |
          if [ -f docker-compose.yml ]; then
            docker-compose pull --quiet || echo "Failed to pull images, will use cached versions"
          else
            echo "docker-compose.yml not found, skipping image pull"
          fi

      - name: Verify test scripts
        run: |
          ls -la docker/
          chmod +x docker/*.sh || true
          if [ -f docker/test-runner.sh ]; then
            echo "✓ test-runner.sh found"
          else
            echo "✗ test-runner.sh not found"
            exit 1
          fi

      - name: Run database integration tests
        id: tests
        run: |
          cd docker
          if [ -f test-runner.sh ]; then
            ./test-runner.sh
          else
            echo "test-runner.sh not found, running tests directly"
            cd ..
            npm run test -- --coverage --verbose
          fi

      - name: Collect Docker logs on failure
        if: failure() && steps.tests.outcome == 'failure'
        run: |
          mkdir -p test-results/logs
          if [ -f docker/docker-compose.yml ]; then
            cd docker
            docker-compose logs > ../test-results/logs/docker-compose.log 2>&1 || true
            docker-compose ps > ../test-results/logs/docker-ps.log 2>&1 || true
          fi
          docker ps -a > test-results/logs/docker-ps-all.log 2>&1 || true
          docker images > test-results/logs/docker-images.log 2>&1 || true
          docker volume ls > test-results/logs/docker-volumes.log 2>&1 || true
          docker network ls > test-results/logs/docker-networks.log 2>&1 || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: |
            test-results/
            test-output.log
            coverage/
          retention-days: 7
          if-no-files-found: warn

      - name: Upload coverage to Codecov
        if: always() && hashFiles('coverage/lcov.info') != ''
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: database-integration
          name: database-tests-node-${{ matrix.node-version }}
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Generate coverage report
        if: always() && hashFiles('coverage/coverage-summary.json') != ''
        run: |
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage/coverage-summary.json ]; then
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat coverage/coverage-summary.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "Coverage summary not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Cleanup Docker resources
        if: always() && (github.event.inputs.cleanup != 'false')
        run: |
          cd docker
          if [ -f cleanup.sh ]; then
            ./cleanup.sh --force
          else
            if [ -f docker-compose.yml ]; then
              docker-compose down -v --remove-orphans || true
            fi
            docker system prune -f --volumes || true
          fi

      - name: Check disk space after cleanup
        if: always()
        run: df -h

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: database-integration-tests
    if: always()

    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: all-test-results

      - name: Generate test summary
        run: |
          echo "# Database Integration Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.database-integration-tests.result }}" == "success" ]; then
            echo "✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some tests failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Matrix Results" >> $GITHUB_STEP_SUMMARY
          echo "- Node 18.x: ${{ needs.database-integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Node 20.x: ${{ needs.database-integration-tests.result }}" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "Test results and coverage reports have been uploaded as artifacts." >> $GITHUB_STEP_SUMMARY

          if [ -d all-test-results ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Available Artifacts" >> $GITHUB_STEP_SUMMARY
            find all-test-results -type f -name "*.log" -o -name "*.json" | while read file; do
              echo "- \`${file}\`" >> $GITHUB_STEP_SUMMARY
            done
          fi

      - name: Check test status
        if: needs.database-integration-tests.result != 'success'
        run: |
          echo "Database integration tests failed!"
          exit 1
