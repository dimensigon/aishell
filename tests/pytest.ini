[pytest]
# Pytest Configuration for AIShell Consolidated Tests

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test paths
testpaths = .
norecursedirs = .git __pycache__ node_modules coverage-reports .pytest_cache

# Output and reporting
addopts =
    --verbose
    --strict-markers
    --tb=short
    --cov=aishell
    --cov-report=term-missing
    --cov-report=html:coverage-reports/html
    --cov-report=xml:coverage-reports/coverage.xml
    --cov-report=json:coverage-reports/coverage.json
    --cov-branch
    --maxfail=5
    --durations=10
    -ra
    --color=yes

# Coverage settings
[coverage:run]
source = aishell
omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */node_modules/*
    */venv/*
    */.venv/*

[coverage:report]
precision = 2
show_missing = True
skip_covered = False
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod

# Markers
markers =
    unit: Unit tests
    integration: Integration tests
    e2e: End-to-end tests
    performance: Performance tests
    security: Security tests
    functional: Functional tests
    slow: Slow running tests
    database: Database-related tests
    ai: AI/LLM-related tests
    mcp: MCP-related tests
    agents: Agent system tests
    ui: UI-related tests
    async: Asynchronous tests
    skip_ci: Skip in CI environment

# Logging
log_cli = True
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = test_logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Asyncio
asyncio_mode = auto

# Timeouts
timeout = 300
timeout_method = thread

# Warnings
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# xdist (parallel execution)
[pytest:xdist]
# Use -n auto to run tests in parallel across all CPU cores
